package net.opentrends.studentdata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.opentrends.studentdata.model.StudentDetails;
import net.opentrends.studentdata.model.StudentDetailsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StudentDetails service. Represents a row in the &quot;StudentData_StudentDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.opentrends.studentdata.model.StudentDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentDetailsImpl
 * @see net.opentrends.studentdata.model.StudentDetails
 * @see net.opentrends.studentdata.model.StudentDetailsModel
 * @generated
 */
public class StudentDetailsModelImpl extends BaseModelImpl<StudentDetails>
    implements StudentDetailsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a student details model instance should use the {@link net.opentrends.studentdata.model.StudentDetails} interface instead.
     */
    public static final String TABLE_NAME = "StudentData_StudentDetails";
    public static final Object[][] TABLE_COLUMNS = {
            { "studentId", Types.BIGINT },
            { "studentName", Types.VARCHAR },
            { "department", Types.VARCHAR },
            { "semester", Types.BIGINT },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table StudentData_StudentDetails (studentId LONG not null primary key,studentName VARCHAR(75) null,department VARCHAR(75) null,semester LONG,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table StudentData_StudentDetails";
    public static final String ORDER_BY_JPQL = " ORDER BY studentDetails.studentId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY StudentData_StudentDetails.studentId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.opentrends.studentdata.model.StudentDetails"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.opentrends.studentdata.model.StudentDetails"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.opentrends.studentdata.model.StudentDetails"),
            true);
    public static long STUDENTID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.opentrends.studentdata.model.StudentDetails"));
    private static ClassLoader _classLoader = StudentDetails.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StudentDetails.class
        };
    private long _studentId;
    private long _originalStudentId;
    private boolean _setOriginalStudentId;
    private String _studentName;
    private String _department;
    private long _semester;
    private long _groupId;
    private long _columnBitmask;
    private StudentDetails _escapedModel;

    public StudentDetailsModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _studentId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setStudentId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _studentId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return StudentDetails.class;
    }

    @Override
    public String getModelClassName() {
        return StudentDetails.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("studentId", getStudentId());
        attributes.put("studentName", getStudentName());
        attributes.put("department", getDepartment());
        attributes.put("semester", getSemester());
        attributes.put("groupId", getGroupId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long studentId = (Long) attributes.get("studentId");

        if (studentId != null) {
            setStudentId(studentId);
        }

        String studentName = (String) attributes.get("studentName");

        if (studentName != null) {
            setStudentName(studentName);
        }

        String department = (String) attributes.get("department");

        if (department != null) {
            setDepartment(department);
        }

        Long semester = (Long) attributes.get("semester");

        if (semester != null) {
            setSemester(semester);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }
    }

    @Override
    public long getStudentId() {
        return _studentId;
    }

    @Override
    public void setStudentId(long studentId) {
        _columnBitmask |= STUDENTID_COLUMN_BITMASK;

        if (!_setOriginalStudentId) {
            _setOriginalStudentId = true;

            _originalStudentId = _studentId;
        }

        _studentId = studentId;
    }

    public long getOriginalStudentId() {
        return _originalStudentId;
    }

    @Override
    public String getStudentName() {
        if (_studentName == null) {
            return StringPool.BLANK;
        } else {
            return _studentName;
        }
    }

    @Override
    public void setStudentName(String studentName) {
        _studentName = studentName;
    }

    @Override
    public String getDepartment() {
        if (_department == null) {
            return StringPool.BLANK;
        } else {
            return _department;
        }
    }

    @Override
    public void setDepartment(String department) {
        _department = department;
    }

    @Override
    public long getSemester() {
        return _semester;
    }

    @Override
    public void setSemester(long semester) {
        _semester = semester;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            StudentDetails.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public StudentDetails toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StudentDetails) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StudentDetailsImpl studentDetailsImpl = new StudentDetailsImpl();

        studentDetailsImpl.setStudentId(getStudentId());
        studentDetailsImpl.setStudentName(getStudentName());
        studentDetailsImpl.setDepartment(getDepartment());
        studentDetailsImpl.setSemester(getSemester());
        studentDetailsImpl.setGroupId(getGroupId());

        studentDetailsImpl.resetOriginalValues();

        return studentDetailsImpl;
    }

    @Override
    public int compareTo(StudentDetails studentDetails) {
        long primaryKey = studentDetails.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StudentDetails)) {
            return false;
        }

        StudentDetails studentDetails = (StudentDetails) obj;

        long primaryKey = studentDetails.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        StudentDetailsModelImpl studentDetailsModelImpl = this;

        studentDetailsModelImpl._originalStudentId = studentDetailsModelImpl._studentId;

        studentDetailsModelImpl._setOriginalStudentId = false;

        studentDetailsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<StudentDetails> toCacheModel() {
        StudentDetailsCacheModel studentDetailsCacheModel = new StudentDetailsCacheModel();

        studentDetailsCacheModel.studentId = getStudentId();

        studentDetailsCacheModel.studentName = getStudentName();

        String studentName = studentDetailsCacheModel.studentName;

        if ((studentName != null) && (studentName.length() == 0)) {
            studentDetailsCacheModel.studentName = null;
        }

        studentDetailsCacheModel.department = getDepartment();

        String department = studentDetailsCacheModel.department;

        if ((department != null) && (department.length() == 0)) {
            studentDetailsCacheModel.department = null;
        }

        studentDetailsCacheModel.semester = getSemester();

        studentDetailsCacheModel.groupId = getGroupId();

        return studentDetailsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{studentId=");
        sb.append(getStudentId());
        sb.append(", studentName=");
        sb.append(getStudentName());
        sb.append(", department=");
        sb.append(getDepartment());
        sb.append(", semester=");
        sb.append(getSemester());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("net.opentrends.studentdata.model.StudentDetails");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>studentId</column-name><column-value><![CDATA[");
        sb.append(getStudentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>studentName</column-name><column-value><![CDATA[");
        sb.append(getStudentName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>department</column-name><column-value><![CDATA[");
        sb.append(getDepartment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>semester</column-name><column-value><![CDATA[");
        sb.append(getSemester());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
