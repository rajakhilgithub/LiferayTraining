package net.opentrends.studentdata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.opentrends.studentdata.model.StudentMarks;
import net.opentrends.studentdata.model.StudentMarksModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StudentMarks service. Represents a row in the &quot;StudentData_StudentMarks&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.opentrends.studentdata.model.StudentMarksModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentMarksImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentMarksImpl
 * @see net.opentrends.studentdata.model.StudentMarks
 * @see net.opentrends.studentdata.model.StudentMarksModel
 * @generated
 */
public class StudentMarksModelImpl extends BaseModelImpl<StudentMarks>
    implements StudentMarksModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a student marks model instance should use the {@link net.opentrends.studentdata.model.StudentMarks} interface instead.
     */
    public static final String TABLE_NAME = "StudentData_StudentMarks";
    public static final Object[][] TABLE_COLUMNS = {
            { "markId", Types.BIGINT },
            { "studentId", Types.BIGINT },
            { "mark1", Types.BIGINT },
            { "mark2", Types.BIGINT },
            { "mark3", Types.BIGINT },
            { "mark4", Types.BIGINT },
            { "mark5", Types.BIGINT },
            { "total", Types.BIGINT },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table StudentData_StudentMarks (markId LONG not null primary key,studentId LONG,mark1 LONG,mark2 LONG,mark3 LONG,mark4 LONG,mark5 LONG,total LONG,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table StudentData_StudentMarks";
    public static final String ORDER_BY_JPQL = " ORDER BY studentMarks.markId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY StudentData_StudentMarks.markId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.opentrends.studentdata.model.StudentMarks"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.opentrends.studentdata.model.StudentMarks"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.opentrends.studentdata.model.StudentMarks"),
            true);
    public static long STUDENTID_COLUMN_BITMASK = 1L;
    public static long MARKID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.opentrends.studentdata.model.StudentMarks"));
    private static ClassLoader _classLoader = StudentMarks.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StudentMarks.class
        };
    private long _markId;
    private long _studentId;
    private long _originalStudentId;
    private boolean _setOriginalStudentId;
    private long _mark1;
    private long _mark2;
    private long _mark3;
    private long _mark4;
    private long _mark5;
    private long _total;
    private long _groupId;
    private long _columnBitmask;
    private StudentMarks _escapedModel;

    public StudentMarksModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _markId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMarkId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _markId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return StudentMarks.class;
    }

    @Override
    public String getModelClassName() {
        return StudentMarks.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("markId", getMarkId());
        attributes.put("studentId", getStudentId());
        attributes.put("mark1", getMark1());
        attributes.put("mark2", getMark2());
        attributes.put("mark3", getMark3());
        attributes.put("mark4", getMark4());
        attributes.put("mark5", getMark5());
        attributes.put("total", getTotal());
        attributes.put("groupId", getGroupId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long markId = (Long) attributes.get("markId");

        if (markId != null) {
            setMarkId(markId);
        }

        Long studentId = (Long) attributes.get("studentId");

        if (studentId != null) {
            setStudentId(studentId);
        }

        Long mark1 = (Long) attributes.get("mark1");

        if (mark1 != null) {
            setMark1(mark1);
        }

        Long mark2 = (Long) attributes.get("mark2");

        if (mark2 != null) {
            setMark2(mark2);
        }

        Long mark3 = (Long) attributes.get("mark3");

        if (mark3 != null) {
            setMark3(mark3);
        }

        Long mark4 = (Long) attributes.get("mark4");

        if (mark4 != null) {
            setMark4(mark4);
        }

        Long mark5 = (Long) attributes.get("mark5");

        if (mark5 != null) {
            setMark5(mark5);
        }

        Long total = (Long) attributes.get("total");

        if (total != null) {
            setTotal(total);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }
    }

    @Override
    public long getMarkId() {
        return _markId;
    }

    @Override
    public void setMarkId(long markId) {
        _markId = markId;
    }

    @Override
    public long getStudentId() {
        return _studentId;
    }

    @Override
    public void setStudentId(long studentId) {
        _columnBitmask |= STUDENTID_COLUMN_BITMASK;

        if (!_setOriginalStudentId) {
            _setOriginalStudentId = true;

            _originalStudentId = _studentId;
        }

        _studentId = studentId;
    }

    public long getOriginalStudentId() {
        return _originalStudentId;
    }

    @Override
    public long getMark1() {
        return _mark1;
    }

    @Override
    public void setMark1(long mark1) {
        _mark1 = mark1;
    }

    @Override
    public long getMark2() {
        return _mark2;
    }

    @Override
    public void setMark2(long mark2) {
        _mark2 = mark2;
    }

    @Override
    public long getMark3() {
        return _mark3;
    }

    @Override
    public void setMark3(long mark3) {
        _mark3 = mark3;
    }

    @Override
    public long getMark4() {
        return _mark4;
    }

    @Override
    public void setMark4(long mark4) {
        _mark4 = mark4;
    }

    @Override
    public long getMark5() {
        return _mark5;
    }

    @Override
    public void setMark5(long mark5) {
        _mark5 = mark5;
    }

    @Override
    public long getTotal() {
        return _total;
    }

    @Override
    public void setTotal(long total) {
        _total = total;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            StudentMarks.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public StudentMarks toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StudentMarks) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StudentMarksImpl studentMarksImpl = new StudentMarksImpl();

        studentMarksImpl.setMarkId(getMarkId());
        studentMarksImpl.setStudentId(getStudentId());
        studentMarksImpl.setMark1(getMark1());
        studentMarksImpl.setMark2(getMark2());
        studentMarksImpl.setMark3(getMark3());
        studentMarksImpl.setMark4(getMark4());
        studentMarksImpl.setMark5(getMark5());
        studentMarksImpl.setTotal(getTotal());
        studentMarksImpl.setGroupId(getGroupId());

        studentMarksImpl.resetOriginalValues();

        return studentMarksImpl;
    }

    @Override
    public int compareTo(StudentMarks studentMarks) {
        long primaryKey = studentMarks.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StudentMarks)) {
            return false;
        }

        StudentMarks studentMarks = (StudentMarks) obj;

        long primaryKey = studentMarks.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        StudentMarksModelImpl studentMarksModelImpl = this;

        studentMarksModelImpl._originalStudentId = studentMarksModelImpl._studentId;

        studentMarksModelImpl._setOriginalStudentId = false;

        studentMarksModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<StudentMarks> toCacheModel() {
        StudentMarksCacheModel studentMarksCacheModel = new StudentMarksCacheModel();

        studentMarksCacheModel.markId = getMarkId();

        studentMarksCacheModel.studentId = getStudentId();

        studentMarksCacheModel.mark1 = getMark1();

        studentMarksCacheModel.mark2 = getMark2();

        studentMarksCacheModel.mark3 = getMark3();

        studentMarksCacheModel.mark4 = getMark4();

        studentMarksCacheModel.mark5 = getMark5();

        studentMarksCacheModel.total = getTotal();

        studentMarksCacheModel.groupId = getGroupId();

        return studentMarksCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{markId=");
        sb.append(getMarkId());
        sb.append(", studentId=");
        sb.append(getStudentId());
        sb.append(", mark1=");
        sb.append(getMark1());
        sb.append(", mark2=");
        sb.append(getMark2());
        sb.append(", mark3=");
        sb.append(getMark3());
        sb.append(", mark4=");
        sb.append(getMark4());
        sb.append(", mark5=");
        sb.append(getMark5());
        sb.append(", total=");
        sb.append(getTotal());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("net.opentrends.studentdata.model.StudentMarks");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>markId</column-name><column-value><![CDATA[");
        sb.append(getMarkId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>studentId</column-name><column-value><![CDATA[");
        sb.append(getStudentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mark1</column-name><column-value><![CDATA[");
        sb.append(getMark1());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mark2</column-name><column-value><![CDATA[");
        sb.append(getMark2());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mark3</column-name><column-value><![CDATA[");
        sb.append(getMark3());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mark4</column-name><column-value><![CDATA[");
        sb.append(getMark4());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mark5</column-name><column-value><![CDATA[");
        sb.append(getMark5());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>total</column-name><column-value><![CDATA[");
        sb.append(getTotal());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
