package net.opentrends.studentdata.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import net.opentrends.studentdata.model.StudentDetails;
import net.opentrends.studentdata.service.StudentDetailsLocalService;
import net.opentrends.studentdata.service.persistence.StudentDetailsPersistence;
import net.opentrends.studentdata.service.persistence.StudentMarksPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the student details local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link net.opentrends.studentdata.service.impl.StudentDetailsLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see net.opentrends.studentdata.service.impl.StudentDetailsLocalServiceImpl
 * @see net.opentrends.studentdata.service.StudentDetailsLocalServiceUtil
 * @generated
 */
public abstract class StudentDetailsLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements StudentDetailsLocalService,
        IdentifiableBean {
    @BeanReference(type = net.opentrends.studentdata.service.StudentDetailsLocalService.class)
    protected net.opentrends.studentdata.service.StudentDetailsLocalService studentDetailsLocalService;
    @BeanReference(type = StudentDetailsPersistence.class)
    protected StudentDetailsPersistence studentDetailsPersistence;
    @BeanReference(type = net.opentrends.studentdata.service.StudentMarksLocalService.class)
    protected net.opentrends.studentdata.service.StudentMarksLocalService studentMarksLocalService;
    @BeanReference(type = StudentMarksPersistence.class)
    protected StudentMarksPersistence studentMarksPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private StudentDetailsLocalServiceClpInvoker _clpInvoker = new StudentDetailsLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link net.opentrends.studentdata.service.StudentDetailsLocalServiceUtil} to access the student details local service.
     */

    /**
     * Adds the student details to the database. Also notifies the appropriate model listeners.
     *
     * @param studentDetails the student details
     * @return the student details that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public StudentDetails addStudentDetails(StudentDetails studentDetails)
        throws SystemException {
        studentDetails.setNew(true);

        return studentDetailsPersistence.update(studentDetails);
    }

    /**
     * Creates a new student details with the primary key. Does not add the student details to the database.
     *
     * @param studentId the primary key for the new student details
     * @return the new student details
     */
    @Override
    public StudentDetails createStudentDetails(long studentId) {
        return studentDetailsPersistence.create(studentId);
    }

    /**
     * Deletes the student details with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param studentId the primary key of the student details
     * @return the student details that was removed
     * @throws PortalException if a student details with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public StudentDetails deleteStudentDetails(long studentId)
        throws PortalException, SystemException {
        return studentDetailsPersistence.remove(studentId);
    }

    /**
     * Deletes the student details from the database. Also notifies the appropriate model listeners.
     *
     * @param studentDetails the student details
     * @return the student details that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public StudentDetails deleteStudentDetails(StudentDetails studentDetails)
        throws SystemException {
        return studentDetailsPersistence.remove(studentDetails);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(StudentDetails.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return studentDetailsPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.opentrends.studentdata.model.impl.StudentDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return studentDetailsPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.opentrends.studentdata.model.impl.StudentDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return studentDetailsPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return studentDetailsPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return studentDetailsPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public StudentDetails fetchStudentDetails(long studentId)
        throws SystemException {
        return studentDetailsPersistence.fetchByPrimaryKey(studentId);
    }

    /**
     * Returns the student details with the primary key.
     *
     * @param studentId the primary key of the student details
     * @return the student details
     * @throws PortalException if a student details with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public StudentDetails getStudentDetails(long studentId)
        throws PortalException, SystemException {
        return studentDetailsPersistence.findByPrimaryKey(studentId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return studentDetailsPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the student detailses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.opentrends.studentdata.model.impl.StudentDetailsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of student detailses
     * @param end the upper bound of the range of student detailses (not inclusive)
     * @return the range of student detailses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<StudentDetails> getStudentDetailses(int start, int end)
        throws SystemException {
        return studentDetailsPersistence.findAll(start, end);
    }

    /**
     * Returns the number of student detailses.
     *
     * @return the number of student detailses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getStudentDetailsesCount() throws SystemException {
        return studentDetailsPersistence.countAll();
    }

    /**
     * Updates the student details in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param studentDetails the student details
     * @return the student details that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public StudentDetails updateStudentDetails(StudentDetails studentDetails)
        throws SystemException {
        return studentDetailsPersistence.update(studentDetails);
    }

    /**
     * Returns the student details local service.
     *
     * @return the student details local service
     */
    public net.opentrends.studentdata.service.StudentDetailsLocalService getStudentDetailsLocalService() {
        return studentDetailsLocalService;
    }

    /**
     * Sets the student details local service.
     *
     * @param studentDetailsLocalService the student details local service
     */
    public void setStudentDetailsLocalService(
        net.opentrends.studentdata.service.StudentDetailsLocalService studentDetailsLocalService) {
        this.studentDetailsLocalService = studentDetailsLocalService;
    }

    /**
     * Returns the student details persistence.
     *
     * @return the student details persistence
     */
    public StudentDetailsPersistence getStudentDetailsPersistence() {
        return studentDetailsPersistence;
    }

    /**
     * Sets the student details persistence.
     *
     * @param studentDetailsPersistence the student details persistence
     */
    public void setStudentDetailsPersistence(
        StudentDetailsPersistence studentDetailsPersistence) {
        this.studentDetailsPersistence = studentDetailsPersistence;
    }

    /**
     * Returns the student marks local service.
     *
     * @return the student marks local service
     */
    public net.opentrends.studentdata.service.StudentMarksLocalService getStudentMarksLocalService() {
        return studentMarksLocalService;
    }

    /**
     * Sets the student marks local service.
     *
     * @param studentMarksLocalService the student marks local service
     */
    public void setStudentMarksLocalService(
        net.opentrends.studentdata.service.StudentMarksLocalService studentMarksLocalService) {
        this.studentMarksLocalService = studentMarksLocalService;
    }

    /**
     * Returns the student marks persistence.
     *
     * @return the student marks persistence
     */
    public StudentMarksPersistence getStudentMarksPersistence() {
        return studentMarksPersistence;
    }

    /**
     * Sets the student marks persistence.
     *
     * @param studentMarksPersistence the student marks persistence
     */
    public void setStudentMarksPersistence(
        StudentMarksPersistence studentMarksPersistence) {
        this.studentMarksPersistence = studentMarksPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("net.opentrends.studentdata.model.StudentDetails",
            studentDetailsLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "net.opentrends.studentdata.model.StudentDetails");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return StudentDetails.class;
    }

    protected String getModelClassName() {
        return StudentDetails.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = studentDetailsPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
